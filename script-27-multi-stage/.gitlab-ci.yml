workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - when: always 
variables:
  IMAGE_NAME: $CI_REGISTRY_IMAGE
  DEV_SERVER_HOST: "3.227.22.13"
  DEV_ENDPOINT: "http://ec2-3-227-22-13.compute-1.amazonaws.com:3000"
  STAGING_SERVER_HOST: "3.227.22.13"
  STAGING_ENDPOINT: "http://ec2-3-227-22-13.compute-1.amazonaws.com:4000"

stages:
  - test
  - build
  - deploy_dev
  - deploy_staging

run_unit_test:
  stage: test
  image: node:latest
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - app/node_modules
  tags:
    - docker
  before_script:
    - cd app
    - npm install
  script:
    - npm test
  artifacts:
    when: always
    paths:
      - app/junit.xml
    reports:
      junit: app/junit.xml

build_image:
  stage: build
  tags:
    - docker
  before_script:
    - apk add --no-cache jq
    - jq --version
    - export APP_VERSION=$(cat app/package.json | jq -r .version)
    - export VERSION=$APP_VERSION.$CI_PIPELINE_IID
    - echo "VERSION=$VERSION"  >> build.env
  script:
    - docker build -t $IMAGE_NAME:$VERSION .

  artifacts:
    reports:
      dotenv: build.env

push_image:
  stage: build
  needs:
    - build_image
  tags:
    - docker
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker push $IMAGE_NAME:$VERSION
  after_script:
    - docker system prune -af

deploy_to_dev:
  stage: deploy_dev
  tags:
    - docker
  before_script:
    - chmod 400 $SSH_PRIVATE_KEY
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./docker-compose.yml ubuntu@$DEV_SERVER_HOST:/home/ubuntu
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ubuntu@$DEV_SERVER_HOST "
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&

        export COMPOSE_PROJECT_NAME=dev
        export DC_IMAGE_NAME=$IMAGE_NAME &&
        export DC_IMAGE_TAG=$VERSION &&
        export DC_APP_PORT=3000 &&

        docker compose down &&
        docker compose up -d"
  environment:
    name: development
    url: $DEV_ENDPOINT

deploy_to_staging:
  stage: deploy_staging
  tags:
    - docker
  before_script:
    - chmod 400 $SSH_PRIVATE_KEY
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./docker-compose.yml ubuntu@$STAGING_SERVER_HOST:/home/ubuntu
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ubuntu@$STAGING_SERVER_HOST "
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&

        export COMPOSE_PROJECT_NAME=staging
        export DC_IMAGE_NAME=$IMAGE_NAME &&
        export DC_IMAGE_TAG=$VERSION &&
        export DC_APP_PORT=4000 &&

        docker compose down &&
        docker compose up -d"
  environment:
    name: staging
    url: $STAGING_ENDPOINT