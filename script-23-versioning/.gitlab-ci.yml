workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - when: always 
variables:
  IMAGE_NAME: $CI_REGISTRY_IMAGE
  DEV_SERVER_HOST: "3.237.235.39"
  DEV_ENDPOINT: "http://ec2-3-237-235-39.compute-1.amazonaws.com:3000"

stages:
  - test
  - build
  - deploy

run_unit_test:
  stage: test
  image: node:latest
  tags:
    - docker
  before_script:
    - cd app
    - npm install
  script:
    - npm test
  artifacts:
    when: always
    paths:
      - app/junit.xml
    reports:
      junit: app/junit.xml

build_image:
  stage: build
  tags:
    - docker
  before_script:
    - export APP_VERSION=$(cat app/package.json | jq -r .version)
    - export VERSION=$APP_VERSION.$CI_PIPELINE_IID
    - echo $VERSION > version-file.txt
  script:
    - docker build -t $IMAGE_NAME:$VERSION .

  artifacts:
    paths:
      - version-file.txt

push_image:
  stage: build
  needs:
    - build_image
  tags:
    - docker
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker push $IMAGE_NAME:$IMAGE_TAG
  after_script:
    - docker system prune -af

deploy_to_dev:
  stage: deploy
  tags:
    - docker
  needs:
    - push_image
  before_script:
    - chmod 400 $SSH_PRIVATE_KEY
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./docker-compose.yml ubuntu@$DEV_SERVER_HOST:/home/ubuntu
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ubuntu@$DEV_SERVER_HOST "
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&

        export DC_IMAGE_NAME=$IMAGE_NAME &&
        export DC_IMAGE_TAG=$IMAGE_TAG &&

        docker compose down &&
        docker compose up -d"
  environment:
    name: development
    url: $DEV_ENDPOINT
